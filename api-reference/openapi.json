{
"openapi": "3.0.0",
"info": {
"title": "Finflex API documentation",
"version": "1.7.0"
},
"servers": [
{
"url": "https://48x2gpzu9b.execute-api.ap-south-1.amazonaws.com/v1"
}
],
"paths": {
"/access-key": {
"patch": {
"summary": "Generate new Finflex API keys",
"description": "Generate new access key, merchant key, and API password while preserving the client ID.\n- For test keys (`isLive: false`) - No restrictions\n- For live keys (`isLive: true`):\n  * If KYC is verified - Live keys will be generated\n  * If KYC is not verified - Test keys will be generated instead\n",
"tags": [
"API"
],
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"isLive": {
"type": "boolean",
"default": false
},
"isRegenerate": {
"type": "boolean",
"default": false
}
}
},
"example": {
"isLive": false,
"isRegenerate": false
}
}
}
},
"responses": {
"200": {
"description": "Keys generated successfully",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Test keys generated successfully"
},
"keys": {
"type": "object",
"properties": {
"accessKey": {
"type": "string",
"example": "ak_test_1234567890abcdef"
},
"merchantKey": {
"type": "string",
"example": "mk_test_1234567890abcdef"
},
"apiPassword": {
"type": "string",
"example": "ap_test_1234567890abcdef"
},
"clientId": {
"type": "string"
}
}
},
"keyType": {
"type": "string",
"enum": [
"test",
"live"
],
"example": "test"
},
"isKycVerified": {
"type": "boolean",
"example": false
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/auth/request-otp": {
"post": {
"summary": "Request OTP",
"tags": [
"Auth"
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"phoneNumber"
],
"properties": {
"phoneNumber": {
"type": "string"
}
},
"example": {
"phoneNumber": "+911234567899"
}
}
}
}
},
"responses": {
"201": {
"description": "Created",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"otp": {
"$ref": "#/components/schemas/Otp"
}
}
}
}
}
}
}
}
},
"/auth/verify-otp": {
"post": {
"summary": "Verify OTP",
"tags": [
"Auth"
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"phoneNumber",
"otp",
"userDeviceToken"
],
"properties": {
"phoneNumber": {
"type": "string"
},
"otp": {
"type": "number"
}
},
"example": {
"phoneNumber": "+911234567899",
"otp": 123456,
"userDeviceToken": "567676"
}
}
}
}
},
"responses": {
"201": {
"description": "Created",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"user": {
"$ref": "#/components/schemas/User"
},
"tokens": {
"$ref": "#/components/schemas/AuthTokens"
}
}
}
}
}
},
"400": {
"$ref": "#/components/responses/DuplicateEmail"
}
}
}
},
"/auth/register": {
"post": {
"summary": "Register a new user",
"tags": [
"Auth"
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"businessName",
"email",
"phoneNumber",
"password",
"user_details"
],
"properties": {
"businessName": {
"type": "string",
"description": "Business name",
"example": "My Business Name"
},
"email": {
"type": "string",
"format": "email",
"description": "must be unique",
"example": "user@example.com"
},
"phoneNumber": {
"type": "string",
"pattern": "^\\\\+91[0-9]{10}$",
"description": "must be unique and start with +91",
"example": "+919876543210"
},
"password": {
"type": "string",
"format": "password",
"minLength": 8,
"description": "At least one number and one letter",
"example": "Password123"
},
"user_details": {
"type": "object",
"required": [
"name",
"country",
"gender"
],
"properties": {
"name": {
"type": "string",
"description": "Full name of the user",
"example": "John Doe"
},
"country": {
"type": "string",
"description": "Country of residence",
"example": "India"
},
"gender": {
"type": "string",
"enum": [
"Male",
"Female",
"Other"
],
"example": "Male"
}
}
}
}
}
}
}
},
"responses": {
"201": {
"description": "Created",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"user": {
"$ref": "#/components/schemas/User"
},
"tokens": {
"$ref": "#/components/schemas/AuthTokens"
}
}
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"code": {
"type": "number",
"example": 400
},
"message": {
"type": "string",
"example": "Email already taken or Invalid phone number format"
}
}
}
}
}
}
}
}
},
"/auth/login": {
"post": {
"summary": "Login with email/username and password",
"tags": [
"Auth"
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"emailOrUsername",
"password"
],
"properties": {
"emailOrUsername": {
"type": "string",
"format": "email",
"description": "User's email address (either email or username is required)",
"example": "test9099@gmail.com"
},
"password": {
"type": "string",
"format": "password",
"description": "User's password (required)",
"example": "test@9099"
}
}
}
}
}
},
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"user": {
"$ref": "#/components/schemas/User"
},
"tokens": {
"$ref": "#/components/schemas/AuthTokens"
}
}
}
}
}
},
"401": {
"description": "Invalid credentials",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"code": {
"type": "number",
"example": 401
},
"message": {
"type": "string",
"example": "Incorrect email/username or password"
}
}
}
}
}
}
}
}
},
"/auth/admin/login": {
"post": {
"summary": "Admin login",
"tags": [
"Admin"
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"email",
"password"
],
"properties": {
"email": {
"type": "string",
"format": "email"
},
"password": {
"type": "string",
"format": "password"
}
},
"example": {
"email": "your.email@example.com",
"password": "your_password"
}
}
}
}
},
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"user": {
"$ref": "#/components/schemas/User"
},
"tokens": {
"$ref": "#/components/schemas/AuthTokens"
}
}
}
}
}
},
"401": {
"description": "Invalid username or password",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
}
}
}
}
}
}
},
"/auth/logout": {
"post": {
"summary": "Logout",
"tags": [
"Auth"
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"refreshToken"
],
"properties": {
"refreshToken": {
"type": "string"
}
},
"example": {
"refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
}
}
}
}
},
"responses": {
"204": {
"description": "No content"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/auth/refresh-tokens": {
"post": {
"summary": "Refresh auth tokens",
"tags": [
"Auth"
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"refreshToken"
],
"properties": {
"refreshToken": {
"type": "string"
}
},
"example": {
"refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
}
}
}
}
},
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/AuthTokens"
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
}
}
}
},
"/auth/forgot-password": {
"post": {
"summary": "Forgot password",
"description": "An email will be sent to reset password.",
"tags": [
"Auth"
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"email"
],
"properties": {
"email": {
"type": "string",
"format": "email"
}
},
"example": {
"email": "fake@example.com"
}
}
}
}
},
"responses": {
"204": {
"description": "No content"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/auth/reset-password": {
"post": {
"summary": "Reset password",
"tags": [
"Auth"
],
"parameters": [
{
"in": "query",
"name": "token",
"schema": {
"type": "string"
},
"description": "The reset password token"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"password"
],
"properties": {
"password": {
"type": "string",
"format": "password",
"minLength": 8,
"description": "At least one number and one letter"
}
},
"example": {
"password": "password1"
}
}
}
}
},
"responses": {
"204": {
"description": "No content"
},
"401": {
"description": "Password reset failed",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 401,
"message": "Password reset failed"
}
}
}
}
}
}
},
"/auth/send-verification-email": {
"post": {
"summary": "Send verification email",
"description": "An email will be sent to verify email.",
"tags": [
"Auth"
],
"security": [
{
"bearerAuth": []
}
],
"responses": {
"204": {
"description": "No content"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
}
}
}
},
"/auth/verify-email": {
"post": {
"summary": "verify email",
"tags": [
"Auth"
],
"parameters": [
{
"in": "query",
"name": "token",
"schema": {
"type": "string"
},
"description": "The verify email token"
}
],
"responses": {
"204": {
"description": "No content"
},
"401": {
"description": "verify email failed",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 401,
"message": "verify email failed"
}
}
}
}
}
}
},
"/auth/change-password": {
"post": {
"summary": "Change user password",
"description": "User must be authenticated to change their password",
"tags": [
"Auth"
],
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"oldPassword",
"newPassword"
],
"properties": {
"oldPassword": {
"type": "string",
"format": "password",
"description": "Current password"
},
"newPassword": {
"type": "string",
"format": "password",
"minLength": 8,
"description": "At least one number and one letter"
}
},
"example": {
"oldPassword": "currentPassword123",
"newPassword": "newPassword123"
}
}
}
}
},
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Password changed successfully"
}
}
}
}
}
},
"401": {
"description": "Incorrect current password",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 401,
"message": "Current password is incorrect"
}
}
}
},
"404": {
"description": "User not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 404,
"message": "User not found"
}
}
}
}
}
}
},
"/banks": {
"post": {
"summary": "Create a bank",
"description": "Only admins can create banks.",
"tags": [
"Bank"
],
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"name",
"bankKey",
"envType"
],
"properties": {
"name": {
"type": "string",
"description": "Bank name",
"example": "Akhand Anand Co.op Bank"
},
"bankKey": {
"type": "string",
"description": "Bank key",
"example": "AACX"
},
"envType": {
"type": "string",
"description": "Bank environment type",
"enum": [
"test",
"live",
"both"
],
"example": "test"
}
}
}
}
}
},
"responses": {
"201": {
"description": "Created",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Bank"
}
}
}
},
"400": {
"description": "Bad Request"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
},
"get": {
"summary": "Get all banks",
"description": "Only admins can retrieve all banks.",
"tags": [
"Bank"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "name",
"schema": {
"type": "string"
},
"description": "Bank name"
},
{
"in": "query",
"name": "status",
"schema": {
"type": "string"
},
"description": "Bank status"
},
{
"in": "query",
"name": "sortBy",
"schema": {
"type": "string"
},
"description": "sort by query in the form of field:desc/asc (ex. name:asc)"
},
{
"in": "query",
"name": "limit",
"schema": {
"type": "integer",
"minimum": 1
},
"description": "Maximum number of banks"
},
{
"in": "query",
"name": "page",
"schema": {
"type": "integer",
"minimum": 1,
"default": 1
},
"description": "Page number"
},
{
"in": "query",
"name": "searchTerm",
"schema": {
"type": "string"
},
"description": "Search term"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"results": {
"type": "array",
"items": {
"$ref": "#/components/schemas/Bank"
}
},
"page": {
"type": "integer",
"example": 1
},
"limit": {
"type": "integer",
"example": 10
},
"totalPages": {
"type": "integer",
"example": 1
},
"totalResults": {
"type": "integer",
"example": 1
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
}
},
"/banks/{bankId}": {
"get": {
"summary": "Get a bank",
"description": "Only admins can fetch a bank.",
"tags": [
"Bank"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "bankId",
"required": true,
"schema": {
"type": "string"
},
"description": "Bank ID"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Bank"
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
},
"patch": {
"summary": "Update a bank",
"description": "Only admins can update a bank.",
"tags": [
"Bank"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "bankId",
"required": true,
"schema": {
"type": "string"
},
"description": "Bank ID"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"name": {
"type": "string",
"description": "Bank name",
"example": "New Bank Name"
},
"status": {
"type": "string",
"enum": [
"active",
"inactive"
],
"description": "Bank status",
"example": "inactive"
},
"envType": {
"type": "string",
"description": "Bank environment type",
"enum": [
"test",
"live",
"both"
],
"example": "test"
}
}
}
}
}
},
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Bank"
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
},
"delete": {
"summary": "Delete a bank",
"description": "Only admins can delete a bank.",
"tags": [
"Bank"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "bankId",
"required": true,
"schema": {
"type": "string"
},
"description": "Bank ID"
}
],
"responses": {
"204": {
"description": "No content"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/banks/assign/{userId}/{type}": {
"post": {
"summary": "Assign a bank (payin or payout) to a user",
"description": "Only admins (or users with `manageUsers` permission) can assign a bank to a user.\n",
"tags": [
"Bank"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "The ID of the user"
},
{
"in": "path",
"name": "type",
"required": true,
"schema": {
"type": "string",
"enum": [
"payin",
"payout"
]
},
"description": "The type of bank assignment (payin or payout)"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"bankId"
],
"properties": {
"bankId": {
"type": "string",
"description": "ID of the bank to assign",
"example": "64f8fa621fcbadcd12345678"
}
}
}
}
}
},
"responses": {
"200": {
"description": "Bank assigned successfully",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/User"
}
}
}
},
"400": {
"description": "Invalid request or bank inactive"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/exports/exportExcel": {
"post": {
"summary": "Export data to Excel",
"description": "Export transaction, topup, payout, bulk payment, or bank statement data as an Excel file.\\n\\n\n**Note:** The response will trigger an Excel file download if successful.\n",
"tags": [
"Export"
],
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"dataType"
],
"properties": {
"dataType": {
"type": "string",
"enum": [
"transactions",
"topups",
"payouts",
"bulkPayments",
"bankStatements"
],
"description": "Type of data to export (e.g., transactions, topups, payouts, bulkPayments, bankStatements)"
},
"filters": {
"type": "object",
"description": "Optional filters for the export (e.g., date range, status, userId, bankId, etc.)"
}
}
},
"example": {
"dataType": "transactions",
"filters": {
"startDate": "2024-01-01",
"endDate": "2024-01-31",
"status": "success",
"userId": "userId123",
"bankId": "bankId123"
}
}
}
}
},
"responses": {
"200": {
"description": "Excel file download",
"content": {
"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
"schema": {
"type": "string",
"format": "binary"
}
}
}
},
"400": {
"description": "Invalid request"
},
"401": {
"description": "Unauthorized"
}
}
}
},
"/kyc/submit": {
"post": {
"summary": "Submit KYC verification request",
"description": "Users can submit their KYC verification request by uploading Aadhaar card images",
"tags": [
"KYC"
],
"security": [
{
"bearerAuth": []
}
],
"consumes": [
"multipart/form-data"
],
"requestBody": {
"required": true,
"content": {
"multipart/form-data": {
"schema": {
"type": "object",
"required": [
"documentNumber",
"frontImage",
"backImage"
],
"properties": {
"documentNumber": {
"type": "string",
"description": "Aadhaar card number (12 digits, should not start with 0 or 1)",
"example": "2345 6789 0123",
"pattern": "^[2-9][0-9]{11}$"
},
"frontImage": {
"type": "string",
"format": "binary",
"description": "Front image of Aadhaar card"
},
"backImage": {
"type": "string",
"format": "binary",
"description": "Back image of Aadhaar card"
}
}
}
}
}
},
"responses": {
"201": {
"description": "KYC submission successful",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "KYC request submitted successfully and pending verification"
},
"data": {
"type": "object",
"properties": {
"documentId": {
"type": "string",
"example": "5ebac534954b54139806c112"
},
"status": {
"type": "string",
"example": "PENDING"
},
"createdAt": {
"type": "string",
"format": "date-time"
}
}
}
}
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"code": {
"type": "number",
"example": 400
},
"message": {
"type": "string",
"example": "Aadhaar number must be 12 digits"
}
}
}
}
}
},
"401": {
"description": "Unauthorized"
}
}
}
},
"/kyc/status": {
"get": {
"summary": "Get current user's KYC status",
"description": "Logged in users can check their KYC verification status",
"tags": [
"KYC"
],
"security": [
{
"bearerAuth": []
}
],
"responses": {
"200": {
"description": "KYC status information",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"data": {
"type": "object",
"properties": {
"isKycSubmitted": {
"type": "boolean",
"example": true
},
"kycVerificationStatus": {
"type": "string",
"enum": [
"PENDING",
"APPROVED",
"REJECTED",
"PENDING"
],
"example": "PENDING"
},
"submittedAt": {
"type": "string",
"format": "date-time"
},
"updatedAt": {
"type": "string",
"format": "date-time"
},
"message": {
"type": "string",
"example": "KYC is pending verification"
},
"document": {
"type": "object",
"properties": {
"id": {
"type": "string",
"example": "5ebac534954b54139806c112"
},
"documentType": {
"type": "string",
"example": "AADHAAR"
},
"documentNumber": {
"type": "string",
"example": "XXXX-XXXX-1234"
},
"status": {
"type": "string",
"enum": [
"PENDING",
"APPROVED",
"REJECTED"
],
"example": "PENDING"
},
"createdAt": {
"type": "string",
"format": "date-time"
},
"updatedAt": {
"type": "string",
"format": "date-time"
},
"files": {
"type": "array",
"items": {
"type": "object",
"properties": {
"fileType": {
"type": "string",
"enum": [
"FRONT",
"BACK",
"OTHER"
],
"example": "FRONT"
},
"fileUrl": {
"type": "string",
"format": "uri",
"example": "https://example.com/documents/front.jpg"
}
}
}
},
"remarks": {
"type": "string",
"example": null
},
"verifiedAt": {
"type": "string",
"format": "date-time",
"example": null
}
}
}
}
}
}
}
}
}
},
"401": {
"description": "Unauthorized"
}
}
}
},
"/kyc/requests": {
"get": {
"summary": "Get all KYC requests",
"description": "Admin can fetch all KYC verification requests with pagination and filtering",
"tags": [
"KYC"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "searchQuery",
"schema": {
"type": "string"
},
"description": "Search by document number, user name or email"
},
{
"in": "query",
"name": "status",
"schema": {
"type": "string",
"enum": [
"PENDING",
"APPROVED",
"REJECTED"
]
},
"description": "Filter by KYC status"
},
{
"in": "query",
"name": "sortBy",
"schema": {
"type": "string"
},
"description": "Sort by field (format - field:order, e.g. createdAt:desc)"
},
{
"in": "query",
"name": "limit",
"schema": {
"type": "integer",
"minimum": 1
},
"description": "Maximum number of results per page"
},
{
"in": "query",
"name": "page",
"schema": {
"type": "integer",
"minimum": 1,
"default": 1
},
"description": "Page number"
}
],
"responses": {
"200": {
"description": "List of KYC verification requests",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"results": {
"type": "array",
"items": {
"type": "object",
"properties": {
"id": {
"type": "string",
"example": "5ebac534954b54139806c112"
},
"documentType": {
"type": "string",
"example": "AADHAAR"
},
"documentNumber": {
"type": "string",
"example": "XXXX-XXXX-1234"
},
"status": {
"type": "string",
"enum": [
"PENDING",
"APPROVED",
"REJECTED"
],
"example": "PENDING"
},
"createdAt": {
"type": "string",
"format": "date-time"
},
"updatedAt": {
"type": "string",
"format": "date-time"
},
"user": {
"type": "object",
"properties": {
"id": {
"type": "string",
"example": "5ebac534954b54139806c112"
},
"businessName": {
"type": "string",
"example": "ABC Corp"
},
"email": {
"type": "string",
"format": "email",
"example": "user@example.com"
}
}
}
}
}
},
"page": {
"type": "integer",
"example": 1
},
"limit": {
"type": "integer",
"example": 10
},
"totalPages": {
"type": "integer",
"example": 1
},
"totalResults": {
"type": "integer",
"example": 1
}
}
}
}
}
},
"401": {
"description": "Unauthorized"
},
"403": {
"description": "Forbidden"
}
}
}
},
"/kyc/requests/{documentId}": {
"patch": {
"summary": "Update KYC verification request status",
"description": "Admin can approve or reject KYC verification requests",
"tags": [
"KYC"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "documentId",
"required": true,
"schema": {
"type": "string"
},
"description": "KYC document ID"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"status"
],
"properties": {
"status": {
"type": "string",
"enum": [
"APPROVED",
"REJECTED"
],
"example": "APPROVED"
},
"remarks": {
"type": "string",
"description": "Required when rejecting KYC",
"example": "Documents are unclear"
}
}
}
}
}
},
"responses": {
"200": {
"description": "Status updated successfully",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "KYC approved successfully"
},
"data": {
"type": "object",
"properties": {
"documentId": {
"type": "string",
"example": "5ebac534954b54139806c112"
},
"status": {
"type": "string",
"example": "APPROVED"
},
"updatedAt": {
"type": "string",
"format": "date-time"
}
}
}
}
}
}
}
},
"400": {
"description": "Bad request"
},
"401": {
"description": "Unauthorized"
},
"403": {
"description": "Forbidden"
},
"404": {
"description": "KYC document not found"
}
}
}
},
"/kyc/user/{userId}": {
"get": {
"summary": "Get specific user's KYC status",
"description": "Admin can check KYC verification status for any user",
"tags": [
"KYC"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "User ID"
}
],
"responses": {
"200": {
"description": "KYC status information",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"data": {
"type": "object",
"properties": {
"isKycSubmitted": {
"type": "boolean",
"example": true
},
"kycVerificationStatus": {
"type": "string",
"enum": [
"PENDING",
"APPROVED",
"REJECTED",
"PENDING"
],
"example": "PENDING"
},
"submittedAt": {
"type": "string",
"format": "date-time"
},
"updatedAt": {
"type": "string",
"format": "date-time"
},
"message": {
"type": "string",
"example": "KYC is pending verification"
},
"document": {
"type": "object",
"properties": {
"id": {
"type": "string",
"example": "5ebac534954b54139806c112"
},
"documentType": {
"type": "string",
"example": "AADHAAR"
},
"documentNumber": {
"type": "string",
"example": "XXXX-XXXX-1234"
},
"status": {
"type": "string",
"enum": [
"PENDING",
"APPROVED",
"REJECTED"
],
"example": "PENDING"
},
"createdAt": {
"type": "string",
"format": "date-time"
},
"updatedAt": {
"type": "string",
"format": "date-time"
},
"files": {
"type": "array",
"items": {
"type": "object",
"properties": {
"fileType": {
"type": "string",
"enum": [
"FRONT",
"BACK",
"OTHER"
],
"example": "FRONT"
},
"fileUrl": {
"type": "string",
"format": "uri",
"example": "https://example.com/documents/front.jpg"
}
}
}
},
"remarks": {
"type": "string",
"example": null
},
"verifiedAt": {
"type": "string",
"format": "date-time",
"example": null
}
}
}
}
}
}
}
}
}
},
"401": {
"description": "Unauthorized"
},
"403": {
"description": "Forbidden"
},
"404": {
"description": "User not found"
}
}
}
},
"/payin/create-order": {
"post": {
"summary": "Create payin order (deposit)",
"tags": [
"Pay In"
],
"description": "Create a payin order (deposit). This is the opposite of payout (withdraw). This endpoint supports two authentication methods - either use client credentials headers OR bearer token.",
"parameters": [
{
"in": "header",
"name": "x-client-id",
"required": false,
"schema": {
"type": "string"
},
"description": "Finflex client ID (starts with finflex_test_ or finflex_live_)",
"example": "finflex_test_6868706820"
},
{
"in": "header",
"name": "x-client-secret",
"required": false,
"schema": {
"type": "string"
},
"description": "Finflex client secret",
"example": "finflex_test_be3798f8-deed-4215-97b4-556049549670"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"client_id",
"amount",
"order_id",
"callback_url",
"customer_details"
],
"properties": {
"client_id": {
"type": "string",
"example": "finflex_test_6868706820"
},
"amount": {
"type": "number",
"example": 10
},
"order_id": {
"type": "string",
"example": "321sdf"
},
"callback_url": {
"type": "string",
"example": "https://google.com"
},
"customer_details": {
"type": "object",
"required": [
"email",
"mobile",
"name"
],
"properties": {
"email": {
"type": "string",
"example": "donation@gmail.com"
},
"mobile": {
"type": "string",
"example": 9040660463
},
"name": {
"type": "string",
"example": "Testing"
}
}
}
}
}
}
}
},
"responses": {
"201": {
"description": "Payin order created successfully",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Payin order created successfully"
},
"data": {
"type": "object",
"properties": {
"order_id": {
"type": "string",
"example": "321sdf"
},
"client_id": {
"type": "string",
"example": "finflex_test_6868706820"
},
"amount": {
"type": "number",
"example": 10
},
"status": {
"type": "string",
"example": "pending"
},
"payment_url": {
"type": "string",
"example": "https://payment.smebank.com/pay/abc123"
},
"transaction_id": {
"type": "string",
"example": "txn_987654321"
},
"created_at": {
"type": "string",
"format": "date-time",
"example": "2024-07-04T10:30:00Z"
}
}
}
}
}
}
}
},
"401": {
"description": "Authentication failed",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"status": {
"type": "boolean",
"example": false
},
"message": {
"type": "string",
"example": "Authentication failed - please provide either valid client credentials or a valid Bearer token"
}
}
}
}
}
}
}
}
},
"/payin/check-qr-status": {
"post": {
"summary": "Check QR payment status and get payin order details",
"tags": [
"Pay In"
],
"description": "Check the payment status of a QR order and return additional payin order details from the database using ref_id.",
"parameters": [
{
"in": "header",
"name": "x-client-id",
"required": false,
"schema": {
"type": "string"
},
"description": "Finflex client ID (starts with finflex_test_ or finflex_live_)",
"example": "finflex_test_6868706820"
},
{
"in": "header",
"name": "x-client-secret",
"required": false,
"schema": {
"type": "string"
},
"description": "Finflex client secret",
"example": "finflex_test_be3798f8-deed-4215-97b4-556049549670"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"client_id",
"slug",
"ref_id"
],
"properties": {
"client_id": {
"type": "string",
"example": "finflex_test_6868706820"
},
"slug": {
"type": "string",
"example": "QXCtRyzcsJp9"
},
"ref_id": {
"type": "string",
"example": "QXCtRyzcsJp91752058602"
}
}
}
}
}
},
"responses": {
"200": {
"description": "Status and payin order details returned",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"typof": {
"type": "object",
"description": "Response from Typof API"
},
"payin_order": {
"type": "object",
"description": "Payin order details from DB"
}
}
}
}
}
},
"401": {
"description": "Authentication failed",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"status": {
"type": "boolean",
"example": false
},
"message": {
"type": "string",
"example": "Authentication failed - please provide either valid client credentials or a valid Bearer token"
}
}
}
}
}
},
"404": {
"description": "Payin order not found",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"code": {
"type": "number",
"example": 404
},
"message": {
"type": "string",
"example": "Payin order not found with the provided ref_id"
}
}
}
}
}
}
}
}
},
"/payment/payment": {
"post": {
"summary": "Make a test payment",
"tags": [
"Payment"
],
"description": "Make a test bank payment using Teja Finance API. Requires bearer token in request body",
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"beneficiary_name",
"beneficiary_account_numb",
"beneficiary_ifsc_code",
"amount",
"payment_mode",
"x_reference_no",
"bearer_token"
],
"properties": {
"beneficiary_name": {
"type": "string",
"description": "Beneficiary name"
},
"beneficiary_account_numb": {
"type": "string",
"description": "Beneficiary account number"
},
"beneficiary_ifsc_code": {
"type": "string",
"description": "Beneficiary IFSC code"
},
"amount": {
"type": "string",
"description": "Payment amount"
},
"payment_mode": {
"type": "string",
"description": "Payment mode"
},
"x_reference_no": {
"type": "string",
"description": "Reference number"
},
"request_id": {
"type": "string",
"description": "Unique request identifier",
"format": "uuid"
},
"bearer_token": {
"type": "string",
"description": "Bearer token for authentication",
"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
}
}
}
}
}
},
"responses": {
"200": {
"description": "Payment successful",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"status": {
"type": "boolean",
"description": "Payment status"
},
"data": {
"type": "object",
"properties": {
"PaymentReferenceNo": {
"type": "string",
"description": "Payment reference number"
},
"CMPReferenceNo": {
"type": "string",
"description": "CMP reference number"
},
"Status": {
"type": "string",
"description": "Payment status"
},
"transaction_id": {
"type": "string",
"description": "Transaction ID"
},
"amount": {
"type": "string",
"description": "Amount in INR"
}
}
}
}
}
}
}
},
"400": {
"description": "Payment failed",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"access-key": {
"type": "array",
"items": {
"type": "string"
},
"description": "Access key validation error"
}
}
}
}
}
}
}
}
},
"/payment/make-payment": {
"post": {
"summary": "Make a payment",
"tags": [
"Payment"
],
"description": "Make a bank payment with request validation using Teja Finance API",
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"beneficiary_name",
"beneficiary_account_numb",
"beneficiary_ifsc_code",
"amount",
"payment_mode",
"x_reference_no",
"bearer_token"
],
"properties": {
"beneficiary_name": {
"type": "string",
"description": "Beneficiary name",
"example": "John Doe"
},
"beneficiary_account_numb": {
"type": "string",
"description": "Beneficiary account number",
"example": "123456789012"
},
"beneficiary_ifsc_code": {
"type": "string",
"description": "Beneficiary IFSC code",
"example": "SBIN0001234"
},
"amount": {
"type": "string",
"description": "Payment amount",
"example": "1000"
},
"payment_mode": {
"type": "string",
"description": "Payment mode",
"example": "IMPS"
},
"x_reference_no": {
"type": "string",
"description": "Reference number",
"example": "REF123456789"
},
"request_id": {
"type": "string",
"description": "Unique request identifier",
"format": "uuid",
"example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
},
"bearer_token": {
"type": "string",
"description": "Bearer token for authentication",
"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
}
}
}
}
}
},
"responses": {
"200": {
"description": "Payment successful",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"status": {
"type": "boolean",
"description": "Payment status",
"example": true
},
"data": {
"type": "object",
"properties": {
"PaymentReferenceNo": {
"type": "string",
"description": "Payment reference number",
"example": "PAY123456789"
},
"CMPReferenceNo": {
"type": "string",
"description": "CMP reference number",
"example": "CMP987654321"
},
"Status": {
"type": "string",
"description": "Payment status",
"example": "SUCCESS"
},
"transaction_id": {
"type": "string",
"description": "Transaction ID",
"example": "TXN123456789"
},
"amount": {
"type": "string",
"description": "Amount in INR",
"example": "1000.00"
}
}
}
}
}
}
}
},
"400": {
"description": "Validation error or payment failed",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"code": {
"type": "number",
"description": "HTTP status code",
"example": 400
},
"message": {
"type": "string",
"description": "Error message",
"example": "Invalid IFSC code format"
}
}
}
}
}
},
"401": {
"description": "Unauthorized",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"code": {
"type": "number",
"description": "HTTP status code",
"example": 401
},
"message": {
"type": "string",
"description": "Error message",
"example": "Please authenticate"
}
}
}
}
}
},
"500": {
"description": "Internal server error",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"code": {
"type": "number",
"description": "HTTP status code",
"example": 500
},
"message": {
"type": "string",
"description": "Error message",
"example": "Payment failed: Internal server error"
}
}
}
}
}
}
}
}
},
"/payment/upload-bulk-payment": {
"post": {
"summary": "Upload Excel file for bulk payments",
"tags": [
"Payment"
],
"description": "Upload an Excel file containing payment details for bulk processing",
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"multipart/form-data": {
"schema": {
"type": "object",
"required": [
"paymentFile",
"payment_mode",
"bearer_token"
],
"properties": {
"paymentFile": {
"type": "string",
"format": "binary",
"description": "Excel file (.xlsx) containing payment details with columns for amount, beneficiary name, account number and IFSC code"
},
"payment_mode": {
"type": "string",
"enum": [
"IMPS",
"NEFT",
"RTGS"
],
"description": "Payment mode to use for all transactions in the Excel file"
},
"bearer_token": {
"type": "string",
"description": "Bearer token for authentication with the payment provider"
}
}
}
}
}
},
"responses": {
"202": {
"description": "File accepted for processing",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"bulkProcessingId": {
"type": "string",
"description": "Bulk processing ID for tracking",
"example": "60d5f8e75d4fbc2a6c8e4b1a"
},
"fileName": {
"type": "string",
"description": "Original filename",
"example": "payments.xlsx"
},
"totalRecords": {
"type": "number",
"description": "Total number of records in the file",
"example": 100
},
"status": {
"type": "string",
"description": "Processing status",
"example": "PENDING"
}
}
}
}
}
},
"400": {
"description": "Invalid file or validation error"
},
"401": {
"description": "Unauthorized"
}
}
}
},
"/payment/bulk-payment-status/{bulkProcessingId}": {
"get": {
"summary": "Get bulk payment processing status",
"tags": [
"Payment"
],
"description": "Get the status of a bulk payment processing job. Frontend can poll this endpoint to track processing progress.",
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "bulkProcessingId",
"required": true,
"schema": {
"type": "string"
},
"description": "ID of the bulk processing job returned from upload-bulk-payment endpoint"
}
],
"responses": {
"200": {
"description": "Processing status details",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"id": {
"type": "string",
"description": "Bulk processing ID",
"example": "60d5f8e75d4fbc2a6c8e4b1a"
},
"userId": {
"type": "string",
"description": "ID of the user who initiated the processing",
"example": "60d5f8e75d4fbc2a6c8e4b1b"
},
"fileName": {
"type": "string",
"description": "Original filename",
"example": "payments.xlsx"
},
"fileUrl": {
"type": "string",
"description": "S3 URL of the uploaded file",
"example": "https://bucket.s3.ap-south-1.amazonaws.com/bulk-payments/123/file.xlsx"
},
"totalRecords": {
"type": "number",
"description": "Total number of records in the file",
"example": 100
},
"processedRecords": {
"type": "number",
"description": "Number of records processed so far",
"example": 50
},
"successfulRecords": {
"type": "number",
"description": "Number of successful payments",
"example": 45
},
"failedRecords": {
"type": "number",
"description": "Number of failed payments",
"example": 5
},
"batchSize": {
"type": "number",
"description": "Number of records processed in each batch",
"example": 10
},
"status": {
"type": "string",
"enum": [
"PENDING",
"PROCESSING",
"COMPLETED",
"FAILED"
],
"description": "Current processing status",
"example": "PROCESSING"
},
"errors": {
"type": "array",
"description": "List of errors encountered during processing",
"items": {
"type": "object",
"properties": {
"row": {
"type": "number",
"description": "Row number in the Excel file (1-based) or -1 for global errors",
"example": 5
},
"message": {
"type": "string",
"description": "Error message",
"example": "Invalid IFSC code format"
},
"data": {
"type": "object",
"description": "The payment data that caused the error"
}
}
}
},
"createdAt": {
"type": "string",
"format": "date-time",
"description": "Timestamp when processing started",
"example": "2023-06-01T12:00:00Z"
},
"completedAt": {
"type": "string",
"format": "date-time",
"description": "Timestamp when processing completed (null if not completed)",
"example": "2023-06-01T12:05:30Z"
}
}
}
}
}
},
"401": {
"description": "Unauthorized - User not authenticated"
},
"404": {
"description": "Bulk processing record not found"
}
}
}
},
"/payment/make-bulk-payment": {
"post": {
"summary": "Make multiple payments in one request",
"tags": [
"Payment"
],
"description": "Process multiple payment transactions in a single API call",
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"payments"
],
"properties": {
"payments": {
"type": "array",
"description": "Array of payment details",
"items": {
"type": "object",
"required": [
"amount",
"payment_mode",
"beneficiary_name",
"beneficiary_account_numb",
"beneficiary_ifsc_code",
"bearer_token"
],
"properties": {
"amount": {
"type": "number",
"description": "Payment amount",
"example": 1000
},
"payment_mode": {
"type": "string",
"enum": [
"IMPS",
"NEFT",
"RTGS"
],
"description": "Payment mode",
"example": "IMPS"
},
"beneficiary_name": {
"type": "string",
"description": "Beneficiary name",
"example": "John Doe"
},
"beneficiary_account_numb": {
"type": "string",
"description": "Beneficiary account number",
"example": "123456789012"
},
"beneficiary_ifsc_code": {
"type": "string",
"description": "Beneficiary IFSC code",
"example": "SBIN0001234"
},
"bearer_token": {
"type": "string",
"description": "Bearer token for authentication",
"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
},
"x_reference_no": {
"type": "string",
"description": "Reference number (optional)",
"example": "REF123456789"
},
"request_id": {
"type": "string",
"description": "Unique request identifier (optional)",
"example": "req-123-456"
}
}
}
}
}
}
}
}
},
"responses": {
"200": {
"description": "Results of all payment attempts",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"count": {
"type": "number",
"description": "Total number of payment attempts",
"example": 3
},
"results": {
"type": "array",
"description": "Results of each payment attempt",
"items": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"description": "Whether the payment was successful",
"example": true
},
"payment": {
"type": "object",
"description": "The payment details that were submitted"
},
"result": {
"type": "object",
"description": "Payment result details (for successful payments)"
},
"error": {
"type": "string",
"description": "Error message (for failed payments)"
}
}
}
}
}
}
}
}
},
"400": {
"description": "Validation error"
},
"401": {
"description": "Unauthorized"
}
}
}
},
"/payment/user-bulk-tasks": {
"get": {
"summary": "Get all bulk payment tasks for the current user",
"tags": [
"Payment"
],
"description": "Retrieves a list of all bulk payment processing tasks for the currently authenticated user, ordered from newest to oldest",
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "minimal",
"schema": {
"type": "boolean",
"default": true
},
"description": "When true, omits detailed error data, fileName and fileUrl from the response to reduce payload size"
}
],
"responses": {
"200": {
"description": "List of bulk payment tasks",
"content": {
"application/json": {
"schema": {
"type": "array",
"items": {
"type": "object",
"properties": {
"id": {
"type": "string",
"description": "Bulk processing ID",
"example": "60d5f8e75d4fbc2a6c8e4b1a"
},
"userId": {
"type": "string",
"description": "ID of the user who initiated the processing",
"example": "60d5f8e75d4fbc2a6c8e4b1b"
},
"fileName": {
"type": "string",
"description": "Original filename (omitted when minimal=true)",
"example": "payments.xlsx"
},
"fileUrl": {
"type": "string",
"description": "S3 URL of the uploaded file (omitted when minimal=true)",
"example": "https://bucket.s3.ap-south-1.amazonaws.com/bulk-payments/123/file.xlsx"
},
"totalRecords": {
"type": "number",
"description": "Total number of records in the file",
"example": 100
},
"processedRecords": {
"type": "number",
"description": "Number of records processed",
"example": 50
},
"successfulRecords": {
"type": "number",
"description": "Number of successful payments",
"example": 45
},
"failedRecords": {
"type": "number",
"description": "Number of failed payments",
"example": 5
},
"batchSize": {
"type": "number",
"description": "Number of records processed in each batch",
"example": 10
},
"status": {
"type": "string",
"enum": [
"PENDING",
"PROCESSING",
"COMPLETED",
"FAILED"
],
"description": "Current processing status",
"example": "COMPLETED"
},
"errors": {
"type": "array",
"description": "List of errors encountered during processing (detailed error data omitted when minimal=true)",
"items": {
"type": "object",
"properties": {
"row": {
"type": "number",
"description": "Row number in the Excel file (1-based) or -1 for global errors",
"example": 5
},
"message": {
"type": "string",
"description": "Error message",
"example": "Invalid IFSC code format"
},
"data": {
"type": "object",
"description": "The payment data that caused the error (omitted when minimal=true)"
}
}
}
},
"createdAt": {
"type": "string",
"format": "date-time",
"description": "Timestamp when the task was created",
"example": "2023-06-01T12:00:00Z"
},
"updatedAt": {
"type": "string",
"format": "date-time",
"description": "Timestamp when the task was last updated",
"example": "2023-06-01T12:05:30Z"
},
"completedAt": {
"type": "string",
"format": "date-time",
"description": "Timestamp when processing completed (null if not completed)",
"example": "2023-06-01T12:05:30Z"
}
}
}
}
}
}
},
"401": {
"description": "Unauthorized - User not authenticated"
}
}
}
},
"/tickets": {
"post": {
"summary": "Create a new ticket",
"description": "Users can create new support tickets.",
"tags": [
"Tickets"
],
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"multipart/form-data": {
"schema": {
"type": "object",
"required": [
"subject",
"precedence",
"message"
],
"properties": {
"subject": {
"type": "string",
"description": "Ticket subject"
},
"precedence": {
"type": "string",
"enum": [
"low",
"medium",
"high"
],
"description": "Ticket priority"
},
"message": {
"type": "string",
"description": "Ticket message content"
},
"images": {
"type": "array",
"items": {
"type": "string",
"format": "binary"
},
"description": "Images related to the ticket (max 5, each up to 3MB)"
}
}
}
}
}
},
"responses": {
"201": {
"description": "Created",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Ticket created successfully"
},
"ticket": {
"type": "object"
}
}
}
}
}
},
"400": {
"description": "Bad Request"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
},
"get": {
"summary": "Get all user tickets",
"description": "Users can retrieve all their tickets.",
"tags": [
"Tickets"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "status",
"schema": {
"type": "string",
"enum": [
"open",
"closed"
]
},
"description": "Filter by ticket status"
},
{
"in": "query",
"name": "startDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by start date"
},
{
"in": "query",
"name": "endDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by end date"
},
{
"in": "query",
"name": "sortBy",
"schema": {
"type": "string"
},
"description": "Sort by field (e.g., createdAt:desc)"
},
{
"in": "query",
"name": "limit",
"schema": {
"type": "integer",
"minimum": 1
},
"description": "Maximum number of tickets"
},
{
"in": "query",
"name": "page",
"schema": {
"type": "integer",
"minimum": 1
},
"description": "Page number"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Tickets fetched successfully"
},
"result": {
"type": "object",
"properties": {
"results": {
"type": "array",
"items": {
"type": "object"
}
},
"page": {
"type": "number"
},
"limit": {
"type": "number"
},
"totalPages": {
"type": "number"
},
"totalResults": {
"type": "number"
}
}
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
}
},
"/tickets/admin": {
"get": {
"summary": "Get all tickets (admin)",
"description": "Admins can retrieve all tickets.",
"tags": [
"Tickets"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "status",
"schema": {
"type": "string",
"enum": [
"open",
"closed"
]
},
"description": "Filter by ticket status"
},
{
"in": "query",
"name": "precedence",
"schema": {
"type": "string",
"enum": [
"low",
"medium",
"high"
]
},
"description": "Filter by ticket priority"
},
{
"in": "query",
"name": "startDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by start date"
},
{
"in": "query",
"name": "endDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by end date"
},
{
"in": "query",
"name": "sortBy",
"schema": {
"type": "string"
},
"description": "Sort by field (e.g., createdAt:desc)"
},
{
"in": "query",
"name": "limit",
"schema": {
"type": "integer",
"minimum": 1
},
"description": "Maximum number of tickets"
},
{
"in": "query",
"name": "page",
"schema": {
"type": "integer",
"minimum": 1
},
"description": "Page number"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "All tickets fetched successfully"
},
"result": {
"type": "object",
"properties": {
"results": {
"type": "array",
"items": {
"type": "object"
}
},
"page": {
"type": "number"
},
"limit": {
"type": "number"
},
"totalPages": {
"type": "number"
},
"totalResults": {
"type": "number"
}
}
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
}
},
"/tickets/{ticketId}": {
"get": {
"summary": "Get ticket by ID",
"description": "Get details of a specific ticket.",
"tags": [
"Tickets"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "ticketId",
"required": true,
"schema": {
"type": "string"
},
"description": "Ticket ID"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Ticket fetched successfully"
},
"ticket": {
"type": "object"
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/tickets/{ticketId}/reply": {
"post": {
"summary": "Add a reply to a ticket",
"description": "Add a reply to an existing ticket.",
"tags": [
"Tickets"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "ticketId",
"required": true,
"schema": {
"type": "string"
},
"description": "Ticket ID"
}
],
"requestBody": {
"required": true,
"content": {
"multipart/form-data": {
"schema": {
"type": "object",
"required": [
"message"
],
"properties": {
"message": {
"type": "string",
"description": "Reply message content"
},
"images": {
"type": "array",
"items": {
"type": "string",
"format": "binary"
},
"description": "Images related to the reply (max 5, each up to 3MB)"
}
}
}
}
}
},
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Reply added successfully"
},
"ticket": {
"type": "object"
}
}
}
}
}
},
"400": {
"description": "Bad Request"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/tickets/{ticketId}/close": {
"patch": {
"summary": "Close a ticket",
"description": "Admin can close a ticket.",
"tags": [
"Tickets"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "ticketId",
"required": true,
"schema": {
"type": "string"
},
"description": "Ticket ID"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Ticket closed successfully"
},
"ticket": {
"type": "object"
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/topup": {
"post": {
"summary": "Create a new topup",
"tags": [
"Topup"
],
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"multipart/form-data": {
"schema": {
"type": "object",
"properties": {
"utrNumber": {
"type": "string"
},
"amount": {
"type": "number"
},
"screenshot": {
"type": "string",
"format": "binary"
}
}
}
}
}
},
"responses": {
"201": {
"description": "Topup created successfully",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Topup"
}
}
}
},
"400": {
"$ref": "#/components/responses/BadRequest"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
}
}
},
"get": {
"summary": "Get user's topups",
"description": "Retrieve all topups for the authenticated user.",
"tags": [
"Topup"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "utrNumber",
"schema": {
"type": "string"
},
"description": "Filter by UTR number"
},
{
"in": "query",
"name": "startDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by start date (YYYY-MM-DD)"
},
{
"in": "query",
"name": "endDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by end date (YYYY-MM-DD)"
},
{
"in": "query",
"name": "status",
"schema": {
"type": "string",
"enum": [
"pending",
"approved",
"rejected"
]
},
"description": "Filter by topup status"
},
{
"in": "query",
"name": "sortBy",
"schema": {
"type": "string"
},
"description": "Sort by field:order (e.g. createdAt:desc)"
},
{
"in": "query",
"name": "limit",
"schema": {
"type": "integer",
"minimum": 1,
"default": 10
},
"description": "Maximum number of topups per page"
},
{
"in": "query",
"name": "page",
"schema": {
"type": "integer",
"minimum": 1,
"default": 1
},
"description": "Page number"
}
],
"responses": {
"200": {
"description": "List of user's topups",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"data": {
"type": "object",
"properties": {
"results": {
"type": "array",
"items": {
"$ref": "#/components/schemas/Topup"
}
},
"page": {
"type": "integer",
"example": 1
},
"limit": {
"type": "integer",
"example": 10
},
"totalPages": {
"type": "integer",
"example": 1
},
"totalResults": {
"type": "integer",
"example": 1
}
}
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
}
}
}
},
"/topup/all": {
"get": {
"summary": "Get all topups (admin)",
"description": "Retrieve all topups (admin only).",
"tags": [
"Topup"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "status",
"schema": {
"type": "string",
"enum": [
"pending",
"approved",
"rejected"
]
},
"description": "Filter by topup status"
},
{
"in": "query",
"name": "userId",
"schema": {
"type": "string"
},
"description": "Filter by user ID"
},
{
"in": "query",
"name": "utrNumber",
"schema": {
"type": "string"
},
"description": "Filter by UTR number"
},
{
"in": "query",
"name": "startDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by start date (YYYY-MM-DD)"
},
{
"in": "query",
"name": "endDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by end date (YYYY-MM-DD)"
},
{
"in": "query",
"name": "searchTerm",
"schema": {
"type": "string"
},
"description": "Search term for basic search (UTR number)"
},
{
"in": "query",
"name": "searchQuery",
"schema": {
"type": "string"
},
"description": "Comprehensive search query across UTR number and topup ID"
},
{
"in": "query",
"name": "sortBy",
"schema": {
"type": "string"
},
"description": "Sort by field:order (e.g. createdAt:desc)"
},
{
"in": "query",
"name": "limit",
"schema": {
"type": "integer",
"minimum": 1,
"default": 10
},
"description": "Maximum number of topups per page"
},
{
"in": "query",
"name": "page",
"schema": {
"type": "integer",
"minimum": 1,
"default": 1
},
"description": "Page number"
}
],
"responses": {
"200": {
"description": "List of all topups",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"data": {
"type": "object",
"properties": {
"results": {
"type": "array",
"items": {
"$ref": "#/components/schemas/Topup"
}
},
"page": {
"type": "integer",
"example": 1
},
"limit": {
"type": "integer",
"example": 10
},
"totalPages": {
"type": "integer",
"example": 1
},
"totalResults": {
"type": "integer",
"example": 1
}
}
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
}
},
"/topup/{id}": {
"patch": {
"summary": "Update a topup (admin)",
"tags": [
"Topup"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "id",
"schema": {
"type": "string"
},
"required": true,
"description": "Topup ID"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"status": {
"type": "string",
"enum": [
"pending",
"approved",
"rejected"
]
}
}
}
}
}
},
"responses": {
"200": {
"description": "Topup updated successfully",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Topup"
}
}
}
},
"400": {
"$ref": "#/components/responses/BadRequest"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
}
},
"/transactions": {
"get": {
"summary": "Get user's transactions",
"description": "Logged in users can retrieve their own transactions.",
"tags": [
"Transactions"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "status",
"schema": {
"type": "string",
"enum": [
"PENDING",
"SUCCESS",
"FAILED",
"CANCELLED"
]
},
"description": "Filter by transaction status"
},
{
"in": "query",
"name": "payment_mode",
"schema": {
"type": "string",
"enum": [
"IMPS",
"NEFT",
"RTGS"
]
},
"description": "Filter by payment mode"
},
{
"in": "query",
"name": "type",
"schema": {
"type": "string"
},
"description": "Filter by transaction type"
},
{
"in": "query",
"name": "transactionType",
"schema": {
"type": "string",
"enum": [
"PAYOUT",
"BULK_PAYOUT",
"PAY_IN_API",
"PAY_IN"
]
},
"description": "Filter by transaction type"
},
{
"in": "query",
"name": "sortBy",
"schema": {
"type": "string"
},
"description": "Sort by field:order (e.g. createdAt:desc)"
},
{
"in": "query",
"name": "limit",
"schema": {
"type": "integer",
"minimum": 1
},
"default": 10,
"description": "Maximum number of transactions"
},
{
"in": "query",
"name": "page",
"schema": {
"type": "integer",
"minimum": 1,
"default": 1
},
"description": "Page number"
},
{
"in": "query",
"name": "transactionId",
"schema": {
"type": "string"
},
"description": "Filter by transaction ID"
},
{
"in": "query",
"name": "startDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by start date (YYYY-MM-DD)"
},
{
"in": "query",
"name": "endDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter by end date (YYYY-MM-DD)"
},
{
"in": "query",
"name": "isExport",
"schema": {
"type": "boolean"
},
"description": "Export transactions as Excel file if true"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"status": {
"type": "boolean"
},
"data": {
"type": "object",
"properties": {
"results": {
"type": "array",
"items": {
"type": "object",
"properties": {
"id": {
"type": "string"
},
"userId": {
"type": "string"
},
"amount": {
"type": "number"
},
"payment_mode": {
"type": "string",
"enum": [
"IMPS",
"NEFT",
"RTGS"
]
},
"transactionType": {
"type": "string",
"enum": [
"PAYOUT",
"BULK_PAYOUT",
"PAY_IN_API",
"PAY_IN"
]
},
"beneficiary_name": {
"type": "string"
},
"beneficiary_account_numb": {
"type": "string"
},
"beneficiary_ifsc_code": {
"type": "string"
},
"status": {
"type": "string",
"enum": [
"PENDING",
"SUCCESS",
"FAILED",
"CANCELLED"
]
},
"paymentReferenceNo": {
"type": "string"
},
"transactionId": {
"type": "string"
},
"createdAt": {
"type": "string",
"format": "date-time"
},
"updatedAt": {
"type": "string",
"format": "date-time"
}
}
}
},
"page": {
"type": "integer"
},
"limit": {
"type": "integer"
},
"totalPages": {
"type": "integer"
},
"totalResults": {
"type": "integer"
}
}
}
}
}
}
}
},
"401": {
"description": "Unauthorized"
},
"403": {
"description": "Forbidden"
}
}
}
},
"/transactions/{transactionId}": {
"get": {
"summary": "Get a transaction by ID",
"description": "Logged in users can retrieve their own transactions, admins can retrieve any transaction.",
"tags": [
"Transactions"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "transactionId",
"required": true,
"schema": {
"type": "string"
},
"description": "Transaction ID"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"id": {
"type": "string"
},
"userId": {
"type": "string"
},
"amount": {
"type": "number"
},
"payment_mode": {
"type": "string",
"enum": [
"IMPS",
"NEFT",
"RTGS"
]
},
"transactionType": {
"type": "string",
"enum": [
"PAYOUT",
"BULK_PAYOUT",
"PAY_IN_API",
"PAY_IN"
]
},
"beneficiary_name": {
"type": "string"
},
"beneficiary_account_numb": {
"type": "string"
},
"beneficiary_ifsc_code": {
"type": "string"
},
"status": {
"type": "string",
"enum": [
"PENDING",
"SUCCESS",
"FAILED"
]
},
"paymentReferenceNo": {
"type": "string"
},
"transactionId": {
"type": "string"
},
"errorMessage": {
"type": "string"
},
"requestData": {
"type": "object"
},
"responseData": {
"type": "object"
},
"createdAt": {
"type": "string",
"format": "date-time"
},
"updatedAt": {
"type": "string",
"format": "date-time"
}
}
}
}
}
},
"401": {
"description": "Unauthorized"
},
"403": {
"description": "Forbidden"
},
"404": {
"description": "Transaction not found"
}
}
}
},
"/transactions/admin/all": {
"get": {
"summary": "Get all transactions",
"description": "Only admins can retrieve all transactions.",
"tags": [
"Transactions"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "status",
"schema": {
"type": "string",
"enum": [
"PENDING",
"SUCCESS",
"FAILED"
]
},
"description": "Filter by transaction status"
},
{
"in": "query",
"name": "payment_mode",
"schema": {
"type": "string",
"enum": [
"IMPS",
"NEFT",
"RTGS"
]
},
"description": "Filter by payment mode"
},
{
"in": "query",
"name": "userId",
"schema": {
"type": "string"
},
"description": "Filter by user ID. If not provided, returns transactions for all users."
},
{
"in": "query",
"name": "transactionId",
"schema": {
"type": "string"
},
"description": "Get a specific transaction by ID"
},
{
"in": "query",
"name": "startDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter transactions on or after this date (YYYY-MM-DD)"
},
{
"in": "query",
"name": "endDate",
"schema": {
"type": "string",
"format": "date"
},
"description": "Filter transactions on or before this date (YYYY-MM-DD)"
},
{
"in": "query",
"name": "transactionType",
"schema": {
"type": "string",
"enum": [
"PAYOUT",
"BULK_PAYOUT",
"PAY_IN_API",
"PAY_IN"
],
"default": "PAYOUT"
},
"description": "Filter by transaction type"
},
{
"in": "query",
"name": "sortBy",
"schema": {
"type": "string"
},
"description": "Sort by field:order (e.g. createdAt:desc)"
},
{
"in": "query",
"name": "limit",
"schema": {
"type": "integer",
"minimum": 1
},
"default": 10,
"description": "Maximum number of transactions"
},
{
"in": "query",
"name": "page",
"schema": {
"type": "integer",
"minimum": 1,
"default": 1
},
"description": "Page number"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"results": {
"type": "array",
"items": {
"type": "object",
"properties": {
"id": {
"type": "string"
},
"userId": {
"type": "string"
},
"amount": {
"type": "number"
},
"payment_mode": {
"type": "string",
"enum": [
"IMPS",
"NEFT",
"RTGS"
]
},
"beneficiary_name": {
"type": "string"
},
"beneficiary_account_numb": {
"type": "string"
},
"beneficiary_ifsc_code": {
"type": "string"
},
"status": {
"type": "string",
"enum": [
"PENDING",
"SUCCESS",
"FAILED"
]
},
"transactionType": {
"type": "string",
"enum": [
"PAYOUT",
"BULK_PAYOUT",
"PAY_IN_API",
"PAY_IN"
]
},
"paymentReferenceNo": {
"type": "string"
},
"transactionId": {
"type": "string"
},
"createdAt": {
"type": "string",
"format": "date-time"
},
"updatedAt": {
"type": "string",
"format": "date-time"
}
}
}
},
"page": {
"type": "integer"
},
"limit": {
"type": "integer"
},
"totalPages": {
"type": "integer"
},
"totalResults": {
"type": "integer"
}
}
}
}
}
},
"401": {
"description": "Unauthorized"
},
"403": {
"description": "Forbidden"
}
}
}
},
"/transactions/validate/pending": {
"get": {
"summary": "Validate pending transactions",
"description": "Validates and updates the status of pending transactions. Only admins can access this endpoint.",
"tags": [
"Transactions"
],
"security": [
{
"bearerAuth": []
}
],
"responses": {
"200": {
"description": "Validation completed",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"status": {
"type": "boolean"
},
"message": {
"type": "string"
}
}
}
}
}
},
"401": {
"description": "Unauthorized"
},
"403": {
"description": "Forbidden"
}
}
}
},
"/users": {
"post": {
"summary": "Create a user",
"description": "Allows admin to create a new user account.",
"tags": [
"Admin"
],
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"email",
"businessName",
"phoneNumber",
"password",
"user_details",
"role"
],
"properties": {
"email": {
"type": "string",
"format": "email"
},
"businessName": {
"type": "string"
},
"phoneNumber": {
"type": "string",
"pattern": "^\\\\+[1-9]\\\\d{1,14}$",
"example": "+1234567890"
},
"password": {
"type": "string",
"minLength": 6,
"pattern": "^(?=.*[A-Za-z])(?=.*\\d)",
"description": "Must contain at least one letter and one number"
},
"user_details": {
"type": "object",
"required": [
"name",
"country",
"gender"
],
"properties": {
"name": {
"type": "string"
},
"country": {
"type": "string"
},
"gender": {
"type": "string",
"enum": [
"Male",
"Female",
"Other"
]
}
}
},
"role": {
"type": "string",
"enum": [
"user",
"admin"
],
"default": "user"
},
"acceptedTerms": {
"type": "boolean",
"default": false
}
},
"example": {
"email": "user@example.com",
"businessName": "Example Business",
"phoneNumber": "+911234567890",
"password": "pass1234",
"user_details": {
"name": "John Doe",
"country": "India",
"gender": "Male"
},
"role": "user",
"acceptedTerms": true
}
}
}
}
},
"responses": {
"201": {
"description": "User created successfully",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/User"
}
}
}
},
"400": {
"$ref": "#/components/responses/BadRequest"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
}
},
"/users/{id}": {
"get": {
"summary": "Get a user",
"description": "Logged in users can fetch only their own user information. Only admins can fetch other users.",
"tags": [
"Users"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "id",
"required": true,
"schema": {
"type": "string"
},
"description": "User id"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/User"
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
},
"patch": {
"summary": "Update a user",
"description": "Logged in users can only update their own information. Only admins can update other users.",
"tags": [
"Users"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "id",
"required": true,
"schema": {
"type": "string"
},
"description": "User id"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"user_details": {
"type": "object",
"properties": {
"firstName": {
"type": "string"
},
"lastName": {
"type": "string"
},
"businessName": {
"type": "string"
},
"businessDesc": {
"type": "string"
},
"businessAddress": {
"type": "string"
},
"city": {
"type": "string"
},
"state": {
"type": "string"
},
"GSTNo": {
"type": "string"
},
"majorRoutes": {
"type": "string"
},
"truckTypes": {
"type": "array",
"items": {
"type": "string"
}
},
"materialShipped": {
"type": "array",
"items": {
"type": "string"
}
},
"avatar": {
"type": "string"
},
"pincode": {
"type": "number"
}
}
}
},
"example": {
"user_details": {
"firstName": "fake name",
"lastName": "fake name",
"businessName": "Your business name",
"businessDesc": "A description of the business with at most 50 words.",
"businessAddress": "D-143-B, Kaushalya Path, Basant Marg, Bani Park, Jaipur 302016, Rajasthan, India",
"city": "Surat",
"state": "Gujarat",
"GSTNo": "27AAAPL1234C1Z0",
"majorRoutes": "Route 1, Route 2, Route 3",
"truckTypes": [
"mahindra-open-body-truck-14-wheeler",
"mahindra-open-body-truck-16-wheeler",
"container-14-ft"
],
"materialShipped": [
"apparels",
"automotive",
"beverages-and-Drinks"
],
"avatar": "profile_avatar_url",
"pincode": 123456
}
}
}
}
}
},
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/User"
}
}
}
},
"400": {
"$ref": "#/components/responses/DuplicateEmail"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
},
"delete": {
"summary": "Delete a user",
"description": "Logged in users can delete only themselves. Only admins can delete other users.",
"tags": [
"Admin"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "id",
"required": true,
"schema": {
"type": "string"
},
"description": "User id"
}
],
"responses": {
"200": {
"description": "No content"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/users/search/{userId}/{searchTerm}": {
"get": {
"summary": "Search for a user by userId and search term",
"description": "Search for a user by userId and either phone number.",
"tags": [
"Users"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "user ID"
},
{
"in": "path",
"name": "searchTerm",
"required": true,
"schema": {
"type": "string"
},
"description": "The search term to look for in phone number."
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"connectionStatus": {
"type": "string",
"enum": [
"not_connected",
"request_send",
"connected"
],
"example": "connected"
},
"result": {
"type": "array",
"items": {
"$ref": "#/components/schemas/User"
}
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/users/{id}/upload": {
"post": {
"summary": "Upload/update profile picture",
"description": "Logged in users can only update their own profile picture.",
"tags": [
"Users"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "id",
"required": true,
"schema": {
"type": "string"
},
"description": "User ID"
}
],
"requestBody": {
"required": true,
"content": {
"multipart/form-data": {
"schema": {
"type": "object",
"properties": {
"file": {
"type": "string",
"format": "binary",
"description": "The profile image to upload."
}
}
}
}
}
},
"responses": {
"200": {
"description": "No content"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/users/search-user/{userId}": {
"get": {
"summary": "Search for Shipper & Currier based on name, from, to.",
"tags": [
"Users"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "User ID."
},
{
"in": "query",
"name": "recipientId",
"schema": {
"type": "string"
},
"description": "Recipient user id (to filter by user)"
},
{
"in": "query",
"name": "searchTerms",
"schema": {
"type": "string"
},
"description": "Search terms used to find matching shipments or couriers."
},
{
"in": "query",
"name": "fromCity",
"schema": {
"type": "string"
},
"description": "From city"
},
{
"in": "query",
"name": "toCity",
"schema": {
"type": "string"
},
"description": "To city"
},
{
"in": "query",
"name": "truckType",
"schema": {
"type": "string"
},
"description": "Truck types"
},
{
"in": "query",
"name": "materialType",
"schema": {
"type": "string"
},
"description": "Material types"
}
],
"responses": {
"200": {
"description": "Successful response with search results.",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"result": {
"type": "object",
"properties": {
"records": {
"type": "array",
"items": {
"type": "object",
"properties": {
"from": {
"type": "string",
"example": "ca"
},
"to": {
"type": "string",
"example": "usa"
},
"vehicleType": {
"type": "string",
"example": "Truck"
},
"material": {
"type": "string",
"example": "good"
},
"paymentTerms": {
"type": "string",
"example": "Oneday"
},
"available": {
"type": "string",
"example": "usa"
}
}
}
}
}
}
}
}
}
}
},
"404": {
"description": "User not found.",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"message": {
"type": "string",
"example": "User not found"
}
}
}
}
}
}
}
}
},
"/users/search-cities/{searchTerms}": {
"get": {
"summary": "Search cities",
"tags": [
"Search"
],
"parameters": [
{
"in": "path",
"name": "searchTerms",
"required": true,
"schema": {
"type": "string"
},
"description": "The search term for cities"
}
],
"responses": {
"200": {
"description": "A list of cities",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"result": {
"type": "array",
"items": {
"type": "object",
"properties": {
"city": {
"type": "string",
"example": "City Name"
},
"state": {
"type": "string",
"example": "State Name"
},
"id": {
"type": "string"
}
}
}
}
}
}
}
}
},
"404": {
"description": "No data found",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"message": {
"type": "string",
"example": "No results found"
},
"error": {
"type": "string",
"example": "Sorry, no results found"
}
}
}
}
}
}
},
"description": "Search for cities based on the search term"
}
},
"/users/search-state/{searchTerms}": {
"get": {
"tags": [
"Search"
],
"summary": "Search states",
"description": "Search for states based on the search term",
"parameters": [
{
"name": "searchTerms",
"in": "path",
"schema": {
"type": "string"
},
"required": true,
"description": "The search term for states ('all' for all states)"
}
],
"responses": {
"200": {
"description": "A list of states",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean"
},
"result": {
"type": "array",
"items": {
"type": "object",
"properties": {
"id": {
"type": "string"
},
"name": {
"type": "string"
}
}
}
}
}
}
}
}
},
"404": {
"description": "No data found"
}
}
}
},
"/users/me": {
"get": {
"summary": "Get current user details",
"description": "Get the details of the currently authenticated user based on their JWT token",
"tags": [
"Users"
],
"security": [
{
"bearerAuth": []
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"_id": {
"type": "string",
"example": "507f1f77bcf86cd799439011"
},
"email": {
"type": "string",
"format": "email",
"example": "user@example.com"
},
"phoneNumber": {
"type": "string",
"example": "+911234567890"
},
"role": {
"type": "string",
"enum": [
"user",
"admin"
],
"example": "user"
},
"user_details": {
"type": "object",
"properties": {
"name": {
"type": "string",
"example": "John Doe"
},
"businessName": {
"type": "string",
"example": "My Business"
},
"country": {
"type": "string",
"example": "India"
},
"gender": {
"type": "string",
"enum": [
"Male",
"Female",
"Other"
],
"example": "Male"
},
"avatar": {
"type": "string",
"example": "https://example.com/avatar.jpg"
},
"businessDesc": {
"type": "string",
"example": "A description of the business"
},
"businessAddress": {
"type": "string",
"example": "123 Business Street"
},
"city": {
"type": "string",
"example": "Mumbai"
},
"state": {
"type": "string",
"example": "Maharashtra"
},
"GSTNo": {
"type": "string",
"example": "27AAAPL1234C1Z0"
},
"majorRoutes": {
"type": "string",
"example": "Route 1, Route 2"
},
"truckTypes": {
"type": "array",
"items": {
"type": "string"
},
"example": [
"mahindra-open-body-truck-14-wheeler",
"container-14-ft"
]
},
"materialShipped": {
"type": "array",
"items": {
"type": "string"
},
"example": [
"apparels",
"automotive"
]
},
"pincode": {
"type": "number",
"example": 400001
}
}
},
"profileCompleted": {
"type": "boolean",
"example": true
},
"createdAt": {
"type": "string",
"format": "date-time",
"example": "2024-01-01T00:00:00.000Z"
},
"updatedAt": {
"type": "string",
"format": "date-time",
"example": "2024-01-01T00:00:00.000Z"
}
}
}
}
}
},
"401": {
"description": "Unauthorized - Invalid or missing token",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"code": {
"type": "number",
"example": 401
},
"message": {
"type": "string",
"example": "Please authenticate"
}
}
}
}
}
},
"404": {
"description": "User not found",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"code": {
"type": "number",
"example": 404
},
"message": {
"type": "string",
"example": "User not found"
}
}
}
}
}
}
}
}
},
"/users/update-user-status/{id}": {
"patch": {
"summary": "Update user active/inactive status",
"description": "Allows admin to activate or deactivate a user account by ID.",
"tags": [
"Admin"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "id",
"required": true,
"schema": {
"type": "string"
},
"description": "The ID of the user to update"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"isActive"
],
"properties": {
"isActive": {
"type": "boolean",
"example": true,
"description": "Set to `true` to activate, `false` to deactivate"
}
}
}
}
}
},
"responses": {
"200": {
"description": "User status updated successfully",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"message": {
"type": "string",
"example": "User activated"
},
"user": {
"$ref": "#/components/schemas/User"
}
}
}
}
}
},
"400": {
"$ref": "#/components/responses/BadRequest"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"description": "User not found"
}
}
}
},
"/users/{userId}": {
"patch": {
"summary": "Update a user",
"description": "Allows an admin to update user details.",
"tags": [
"Admin"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "The ID of the user to update"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"businessName": {
"type": "string"
},
"email": {
"type": "string",
"format": "email"
},
"phoneNumber": {
"type": "string",
"pattern": "^\\\\+[1-9]\\\\d{1,14}$",
"example": "+1234567890"
},
"finflexKeys": {
"type": "object",
"properties": {
"accessKey": {
"type": "string",
"description": "User's access key for API authentication"
},
"merchantKey": {
"type": "string",
"description": "Merchant key for payment processing"
},
"clientId": {
"type": "string",
"description": "Client ID for API integration"
},
"apiPassword": {
"type": "string",
"description": "Password for API authentication"
}
}
},
"user_details": {
"type": "object",
"properties": {
"name": {
"type": "string"
},
"country": {
"type": "string"
},
"gender": {
"type": "string",
"enum": [
"Male",
"Female",
"Other"
]
}
}
},
"isActive": {
"type": "boolean"
},
"availableBalance": {
"type": "number"
}
},
"example": {
"businessName": "Updated Business",
"email": "updated@example.com",
"phoneNumber": "+19876543210",
"finflexKeys": {
"accessKey": "finflex_test_123456789",
"merchantKey": "finflex_test_987654321",
"clientId": "finflex_test_client_123456",
"apiPassword": "finflex_test_987654321"
},
"user_details": {
"name": "Jane Smith",
"country": "USA",
"gender": "Female"
},
"isActive": true,
"availableBalance": 100.5
}
}
}
}
},
"responses": {
"200": {
"description": "User updated successfully",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/User"
}
}
}
},
"400": {
"$ref": "#/components/responses/BadRequest"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"description": "User not found"
}
}
}
},
"/users/commission-configs": {
"get": {
"summary": "Get all commission configurations",
"description": "Get commission configurations for all users.",
"tags": [
"Commission Config"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "query",
"name": "sortBy",
"schema": {
"type": "string"
},
"description": "Sort by query in the form of field:desc/asc (ex. businessName:asc)"
},
{
"in": "query",
"name": "limit",
"schema": {
"type": "integer",
"minimum": 1,
"default": 10
},
"description": "Maximum number of users"
},
{
"in": "query",
"name": "page",
"schema": {
"type": "integer",
"minimum": 1,
"default": 1
},
"description": "Page number"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"results": {
"type": "array",
"items": {
"type": "object",
"properties": {
"userId": {
"type": "string"
},
"businessName": {
"type": "string"
},
"email": {
"type": "string",
"format": "email"
},
"commissionConfig": {
"type": "array",
"items": {
"$ref": "#/components/schemas/CommissionConfig"
}
}
}
}
},
"page": {
"type": "integer",
"example": 1
},
"limit": {
"type": "integer",
"example": 10
},
"totalPages": {
"type": "integer",
"example": 1
},
"totalResults": {
"type": "integer",
"example": 1
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
}
},
"/users/{userId}/commission-config": {
"get": {
"summary": "Get user commission configuration",
"description": "Get commission configuration for a specific user.",
"tags": [
"Commission Config"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "User ID"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"commissionConfig": {
"$ref": "#/components/schemas/CommissionConfig"
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
},
"put": {
"summary": "Update user commission configuration",
"description": "Update commission configuration for a specific user.",
"tags": [
"Commission Config"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "User ID"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"commissionConfig"
],
"properties": {
"commissionConfig": {
"$ref": "#/components/schemas/CommissionConfig"
}
},
"example": {
"commissionConfig": {
"commissionType": "payout",
"startRange": 0,
"endRange": 0,
"chargeType": "percentage",
"value": 5
}
}
}
}
}
},
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Commission configuration updated successfully"
},
"commissionConfig": {
"$ref": "#/components/schemas/CommissionConfig"
}
}
}
}
}
},
"400": {
"$ref": "#/components/responses/BadRequest"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
},
"delete": {
"summary": "Reset user commission configuration",
"description": "Reset a user's commission configuration to defaults.",
"tags": [
"Commission Config"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "User ID"
}
],
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "Commission configuration reset to defaults"
},
"commissionConfig": {
"$ref": "#/components/schemas/CommissionConfig"
}
}
}
}
}
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/users/{userId}/calculate-commission": {
"post": {
"summary": "Calculate commission",
"description": "Calculate commission for a specific amount based on user's commission configuration.",
"tags": [
"Commission Config"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "User ID"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"amount"
],
"properties": {
"amount": {
"type": "number",
"description": "Transaction amount"
}
},
"example": {
"amount": 1000
}
}
}
}
},
"responses": {
"200": {
"description": "OK",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"originalAmount": {
"type": "number",
"example": 1000
},
"commissionAmount": {
"type": "number",
"example": 0.5
},
"finalAmount": {
"type": "number",
"example": 1000.5
}
}
}
}
}
},
"400": {
"$ref": "#/components/responses/BadRequest"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
},
"/users/add-admin": {
"post": {
"summary": "Create a new admin user",
"description": "Only users with admin privileges can create new admin users.",
"tags": [
"Admin"
],
"security": [
{
"bearerAuth": []
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"businessName",
"user_details",
"role",
"userType",
"email",
"password"
],
"properties": {
"businessName": {
"type": "string",
"description": "Business name for the admin",
"example": "Finflex Admin"
},
"user_details": {
"type": "object",
"required": [
"name"
],
"properties": {
"name": {
"type": "string",
"description": "Full name of the admin",
"example": "John Admin"
}
}
},
"role": {
"type": "string",
"enum": [
"admin"
],
"default": "admin",
"description": "User role (always admin for this endpoint)"
},
"userType": {
"type": "string",
"enum": [
"super_admin",
"finance_admin",
"support_admin",
"view_only_admin"
],
"description": "Type of admin user with different permission levels",
"example": "super_admin"
},
"email": {
"type": "string",
"format": "email",
"description": "Email address of the admin",
"example": "admin@example.com"
},
"password": {
"type": "string",
"format": "password",
"minLength": 6,
"description": "Password must contain at least one letter and one number",
"example": "Admin123"
},
"permissions": {
"type": "array",
"items": {
"type": "string"
},
"description": "Specific permissions for this admin",
"example": [
"manageUsers",
"viewReports"
]
},
"isActive": {
"type": "boolean",
"default": true,
"description": "Whether the admin account is active"
}
}
}
}
}
},
"responses": {
"201": {
"description": "Admin created successfully",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"user": {
"type": "object",
"properties": {
"id": {
"type": "string",
"example": "5ebac534954b54139806c112"
},
"email": {
"type": "string",
"example": "admin@example.com"
},
"role": {
"type": "string",
"example": "admin"
},
"userType": {
"type": "string",
"example": "super_admin"
},
"businessName": {
"type": "string",
"example": "Finflex Admin"
},
"isActive": {
"type": "boolean",
"example": true
},
"createdAt": {
"type": "string",
"format": "date-time",
"example": "2023-01-01T00:00:00.000Z"
}
}
}
}
}
}
}
},
"400": {
"$ref": "#/components/responses/BadRequest"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
}
}
}
},
"/users/{userId}/transfer-pg-balance": {
"post": {
"summary": "Transfer PG balance to available balance",
"description": "Admins can transfer a specified amount from a user's pgBalance to their availableBalance.",
"tags": [
"Admin"
],
"security": [
{
"bearerAuth": []
}
],
"parameters": [
{
"in": "path",
"name": "userId",
"required": true,
"schema": {
"type": "string"
},
"description": "The ID of the user to transfer balance for"
}
],
"requestBody": {
"required": true,
"content": {
"application/json": {
"schema": {
"type": "object",
"required": [
"amount"
],
"properties": {
"amount": {
"type": "number",
"description": "Amount to transfer from pgBalance to availableBalance",
"example": 100.5
}
}
}
}
}
},
"responses": {
"200": {
"description": "PG balance transferred successfully",
"content": {
"application/json": {
"schema": {
"type": "object",
"properties": {
"success": {
"type": "boolean",
"example": true
},
"message": {
"type": "string",
"example": "PG balance transferred successfully"
},
"pgBalance": {
"type": "number",
"example": 400.5
},
"availableBalance": {
"type": "number",
"example": 1200.5
}
}
}
}
}
},
"400": {
"$ref": "#/components/responses/BadRequest"
},
"401": {
"$ref": "#/components/responses/Unauthorized"
},
"403": {
"$ref": "#/components/responses/Forbidden"
},
"404": {
"$ref": "#/components/responses/NotFound"
}
}
}
}
},
"components": {
"schemas": {
"User": {
"type": "object",
"properties": {
"id": {
"type": "string"
},
"email": {
"type": "string",
"format": "email"
},
"phoneNumber": {
"type": "string",
"pattern": "^\\\\+91[0-9]{10}$"
},
"user_details": {
"type": "object",
"properties": {
"address": {
"type": "string"
},
"city": {
"type": "string"
},
"state": {
"type": "string"
},
"country": {
"type": "string"
},
"name": {
"type": "string"
},
"gender": {
"type": "string",
"enum": [
"Male",
"Female",
"Other"
]
}
}
},
"name": {
"type": "string"
},
"role": {
"type": "string",
"enum": [
"user",
"admin"
]
},
"kycVerificationStatus": {
"type": "string",
"enum": [
"PENDING",
"APPROVED",
"REJECTED",
"PENDING"
],
"description": "Current status of the user's KYC verification"
},
"businessName": {
"type": "string"
},
"password": {
"type": "string",
"format": "password"
}
},
"example": {
"id": "5ebac534954b54139806c112",
"email": "fake@example.com",
"name": "fake name",
"role": "user",
"kycVerificationStatus": "PENDING"
}
},
"Document": {
"type": "object",
"properties": {
"id": {
"type": "string"
},
"userId": {
"type": "string",
"description": "ID of the user who uploaded the document"
},
"documentType": {
"type": "string",
"enum": [
"AADHAAR",
"PAN",
"PASSPORT",
"DRIVING_LICENSE",
"OTHER"
]
},
"documentNumber": {
"type": "string",
"description": "Document identification number (e.g., Aadhaar number)"
},
"files": {
"type": "array",
"items": {
"type": "object",
"properties": {
"fileType": {
"type": "string",
"enum": [
"FRONT",
"BACK",
"OTHER"
]
},
"fileUrl": {
"type": "string",
"format": "uri"
}
}
}
},
"status": {
"type": "string",
"enum": [
"PENDING",
"APPROVED",
"REJECTED"
]
},
"remarks": {
"type": "string",
"description": "Admin remarks when approving/rejecting KYC"
},
"verifiedBy": {
"type": "string",
"description": "ID of the admin who verified the document"
},
"verifiedAt": {
"type": "string",
"format": "date-time"
},
"createdAt": {
"type": "string",
"format": "date-time"
},
"updatedAt": {
"type": "string",
"format": "date-time"
}
},
"example": {
"id": "5ebac534954b54139806c115",
"userId": "5ebac534954b54139806c112",
"documentType": "AADHAAR",
"documentNumber": "XXXX-XXXX-1234",
"files": [
{
"fileType": "FRONT",
"fileUrl": "https://example.com/documents/front.jpg"
},
{
"fileType": "BACK",
"fileUrl": "https://example.com/documents/back.jpg"
}
],
"status": "PENDING",
"createdAt": "2023-01-01T10:00:00.000Z",
"updatedAt": "2023-01-01T10:00:00.000Z"
}
},
"Bank": {
"type": "object",
"properties": {
"id": {
"type": "string"
},
"name": {
"type": "string"
},
"bankKey": {
"type": "string"
},
"status": {
"type": "string",
"enum": [
"active",
"inactive"
]
},
"envType": {
"type": "string",
"enum": [
"test",
"live",
"both"
]
}
},
"example": {
"id": "5ebac534954b54139806c113",
"name": "Akhand Anand Co.op Bank",
"bankKey": "akhand-anand-co-op-bank",
"status": "active",
"envType": "test"
}
},
"Otp": {
"type": "object",
"properties": {
"success": {
"type": "boolean"
},
"otp": {
"type": "number"
},
"expireAt": {
"type": "string"
},
"message": {
"type": "string"
}
},
"example": {
"success": true,
"otp": 684654,
"to": "2024-06-10T10:49:27.204Z",
"createdAt": "OTP sent successfully"
}
},
"Token": {
"type": "object",
"properties": {
"token": {
"type": "string"
},
"expires": {
"type": "string",
"format": "date-time"
}
},
"example": {
"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg",
"expires": "2020-05-12T16:18:04.793Z"
}
},
"AuthTokens": {
"type": "object",
"properties": {
"access": {
"$ref": "#/components/schemas/Token"
},
"refresh": {
"$ref": "#/components/schemas/Token"
}
}
},
"Error": {
"type": "object",
"properties": {
"code": {
"type": "number"
},
"message": {
"type": "string"
}
}
},
"CommissionConfig": {
"type": "object",
"properties": {
"commissionType": {
"type": "string",
"enum": [
"payin",
"payout"
],
"description": "Type of commission (payin or payout)"
},
"startRange": {
"type": "number",
"description": "Starting amount range for this configuration"
},
"endRange": {
"type": "number",
"description": "Ending amount range for this configuration"
},
"chargeType": {
"type": "string",
"enum": [
"percentage",
"fixed"
],
"description": "Type of charge (percentage or fixed amount)"
},
"value": {
"type": "number",
"description": "Charge value (percentage or fixed amount)"
}
},
"example": {
"commissionType": "payout",
"startRange": 0,
"endRange": 0,
"chargeType": "percentage",
"value": 5
}
}
},
"responses": {
"DuplicateEmail": {
"description": "Email already taken",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 400,
"message": "Email already taken"
}
}
}
},
"Unauthorized": {
"description": "Unauthorized",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 401,
"message": "Please authenticate"
}
}
}
},
"Forbidden": {
"description": "Forbidden",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 403,
"message": "Forbidden"
}
}
}
},
"NotFound": {
"description": "Not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 404,
"message": "Not found"
}
}
}
},
"BadRequest": {
"description": "Bad request",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 400,
"message": "Bad request"
}
}
}
},
"KycRequired": {
"description": "KYC verification required",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Error"
},
"example": {
"code": 403,
"message": "KYC verification required. Please complete your KYC verification before proceeding."
}
}
}
}
},
"securitySchemes": {
"bearerAuth": {
"type": "http",
"scheme": "bearer",
"bearerFormat": "JWT"
}
}
},
"tags": [
{
"name": "API",
"description": "API Access Key management"
},
{
"name": "Auth",
"description": "Authentication"
},
{
"name": "Admin",
"description": "Admin management"
},
{
"name": "Bank",
"description": "Bank management and operations"
},
{
"name": "KYC",
"description": "KYC verification and management"
},
{
"name": "Pay In",
"description": "Pay-in operations"
},
{
"name": "Payment",
"description": "Payment-related API endpoints"
},
{
"name": "Tickets",
"description": "Ticket management and retrieval"
},
{
"name": "Topup",
"description": "Topup management and operations"
},
{
"name": "Transactions",
"description": "Transaction management and retrieval"
}
]
}